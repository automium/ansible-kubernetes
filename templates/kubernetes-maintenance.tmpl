#!/usr/bin/env bash
# kubectl_drain is called before worker node shutdown/reboot.
# kubectl_delete is called before node deletion by provisioner.
# kubectl_uncordon is called whether a reboot of this worker node happens.

# Ref:
# - https://kubernetes.io/docs/tasks/administer-cluster/safely-drain-node/
# - https://kubernetes.io/docs/tasks/administer-cluster/cluster-management/

export CLUSTER_NAME={{ cluster_name }}

kubectl_drain () {
  CLEANUP_NEEDED=$(curl -sS http://{{ consul }}:{{ consul_port }}/v1/kv/{{ cluster_name }}/{{ identity }}/cleanup/{{ ansible_hostname }})
  if [ -z "${CLEANUP_NEEDED}" ]; then
    $DELETE_LOCAL_DATA="--delete-local-data"
  fi

  ssh -o StrictHostKeyChecking=no ${CLUSTER_NAME}-kube-master.service.automium.consul \
  "kubectl drain ${HOSTNAME} --ignore-daemonsets $DELETE_LOCAL_DATA &"
  sleep 30
}

kubectl_delete () {
  CLEANUP_NEEDED=$(curl -sS http://{{ consul }}:{{ consul_port }}/v1/kv/{{ cluster_name }}/{{ identity }}/cleanup/{{ ansible_hostname }})
  if [ -z "${CLEANUP_NEEDED}" ]; then
      ssh -o StrictHostKeyChecking=no ${CLUSTER_NAME}-kube-master.service.automium.consul \
      "kubectl delete node ${HOSTNAME}"
  fi
}

kubectl_uncordon () {
  ssh -o StrictHostKeyChecking=no ${CLUSTER_NAME}-kube-master.service.automium.consul \
  "kubectl uncordon ${HOSTNAME}"
}

case "$1" in
  (kubectl_drain)
    kubectl_drain
    ;;
  (kubectl_delete)
    kubectl_delete
    ;;
  (kubectl_uncordon)
    kubectl_uncordon
    ;;
  (*)
    echo "Usage: $0 {kubectl_drain|kubectl_delete|kubectl_uncordon}"
    exit 2
    ;;
esac
